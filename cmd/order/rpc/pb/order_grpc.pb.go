// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderRPCService_CreateOrder_FullMethodName = "/pb.OrderRPCService/createOrder"
	OrderRPCService_QueryOrder_FullMethodName  = "/pb.OrderRPCService/queryOrder"
)

// OrderRPCServiceClient is the client API for OrderRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderRPCServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
	QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderResp, error)
}

type orderRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderRPCServiceClient(cc grpc.ClientConnInterface) OrderRPCServiceClient {
	return &orderRPCServiceClient{cc}
}

func (c *orderRPCServiceClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	out := new(CreateOrderResp)
	err := c.cc.Invoke(ctx, OrderRPCService_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRPCServiceClient) QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderResp, error) {
	out := new(QueryOrderResp)
	err := c.cc.Invoke(ctx, OrderRPCService_QueryOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderRPCServiceServer is the server API for OrderRPCService service.
// All implementations must embed UnimplementedOrderRPCServiceServer
// for forward compatibility
type OrderRPCServiceServer interface {
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderResp, error)
	QueryOrder(context.Context, *QueryOrderReq) (*QueryOrderResp, error)
	mustEmbedUnimplementedOrderRPCServiceServer()
}

// UnimplementedOrderRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderRPCServiceServer struct {
}

func (UnimplementedOrderRPCServiceServer) CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderRPCServiceServer) QueryOrder(context.Context, *QueryOrderReq) (*QueryOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedOrderRPCServiceServer) mustEmbedUnimplementedOrderRPCServiceServer() {}

// UnsafeOrderRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderRPCServiceServer will
// result in compilation errors.
type UnsafeOrderRPCServiceServer interface {
	mustEmbedUnimplementedOrderRPCServiceServer()
}

func RegisterOrderRPCServiceServer(s grpc.ServiceRegistrar, srv OrderRPCServiceServer) {
	s.RegisterService(&OrderRPCService_ServiceDesc, srv)
}

func _OrderRPCService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCServiceServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRPCService_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRPCServiceServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderRPCService_QueryOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRPCServiceServer).QueryOrder(ctx, req.(*QueryOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderRPCService_ServiceDesc is the grpc.ServiceDesc for OrderRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrderRPCService",
	HandlerType: (*OrderRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createOrder",
			Handler:    _OrderRPCService_CreateOrder_Handler,
		},
		{
			MethodName: "queryOrder",
			Handler:    _OrderRPCService_QueryOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/order.proto",
}
