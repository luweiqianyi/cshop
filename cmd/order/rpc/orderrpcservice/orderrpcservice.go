// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderrpcservice

import (
	"context"

	"cshop/cmd/order/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateOrderReq      = pb.CreateOrderReq
	CreateOrderResp     = pb.CreateOrderResp
	OrderAdditionalInfo = pb.OrderAdditionalInfo
	OrderInfo           = pb.OrderInfo
	QueryOrderReq       = pb.QueryOrderReq
	QueryOrderResp      = pb.QueryOrderResp

	OrderRPCService interface {
		CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
		QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderResp, error)
	}

	defaultOrderRPCService struct {
		cli zrpc.Client
	}
)

func NewOrderRPCService(cli zrpc.Client) OrderRPCService {
	return &defaultOrderRPCService{
		cli: cli,
	}
}

func (m *defaultOrderRPCService) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	client := pb.NewOrderRPCServiceClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrderRPCService) QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderResp, error) {
	client := pb.NewOrderRPCServiceClient(m.cli.Conn())
	return client.QueryOrder(ctx, in, opts...)
}
